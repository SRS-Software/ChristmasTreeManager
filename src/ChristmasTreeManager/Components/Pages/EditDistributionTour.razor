@page "/edit-distribution-tour"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ApplicationDbService ApplicationDbService

<PageTitle>Zetteltour</PageTitle>
<RadzenRow>
    <RadzenColumn SizeMD="9">
    <RadzenLabel style="font-weight: bold" Text="Item no longer available." Visible="@(!canEdit)" />
    </RadzenColumn>
    <RadzenColumn SizeMD="3">
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" style="margin-bottom: 20px" Text="Close" Visible="@(!canEdit)" Click="@CancelButtonClick" />
    </RadzenColumn>
</RadzenRow>
<RadzenRow>
    <RadzenColumn SizeMD="9">
    <RadzenLabel style="font-weight: bold" Text="Another user has made conflicting changes to one or more of the fields you have modified. Please reload." Visible="@hasChanges" />
    </RadzenColumn>
    <RadzenColumn SizeMD="3">
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="autorenew" style="margin-bottom: 20px" Text="Reload" Visible="@hasChanges" Click="@ReloadButtonClick" />
    </RadzenColumn>
</RadzenRow>

    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save DistributionTour</RadzenAlert>
        <RadzenTemplateForm TItem="DistributionTour" Data="@distributionTour" Visible="@(distributionTour != null && canEdit)" Submit="@FormSubmit">
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Id" Component="Id" style="width: 100%"  />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@distributionTour!.Id" Name="Id" Disabled=true />
                    <RadzenRequiredValidator Component="Id" Text="Id is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@distributionTour!.Name" Name="Name" />
                    <RadzenRequiredValidator Component="Name" Text="Name is required" />
                </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Mitarbeiter" Component="Staff" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@distributionTour!.Staff" Name="Staff" />                <RadzenRequiredValidator Component="Staff" Text="Staff is required" />            </RadzenColumn>        </RadzenRow>        <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Speichern" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Abbruch" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>@code {
    [Inject]
    protected SecurityService Security { get; set; } = null!;

    [Parameter]
    public required string Id { get; set; }

    protected bool hasChanges = false;
    protected bool canEdit = true;
    protected bool errorVisible;
    protected DistributionTour distributionTour = null!;

    protected override async Task OnInitializedAsync()
    {
        distributionTour = await ApplicationDbService.GetDistributionTourById(Id) ?? throw new InvalidOperationException("Failed to query Entity!");
    }

    protected async Task FormSubmit()
    {
        try
        {
            await ApplicationDbService.UpdateDistributionTour(Security.UserName, Id, distributionTour);
            DialogService.Close(distributionTour);
        }
        catch (Exception ex)
        {
            hasChanges = ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException;
            canEdit = !(ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException);
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }

    protected async Task ReloadButtonClick(MouseEventArgs args)
    {
        ApplicationDbService.Reset();
        hasChanges = false;
        canEdit = true;
        distributionTour = await ApplicationDbService.GetDistributionTourById(Id) ?? throw new InvalidOperationException("Failed to query Entity!");
    }
}
