@page "/streets"@attribute [Authorize]@inject IJSRuntime JSRuntime@inject NavigationManager NavigationManager@inject DialogService DialogService@inject ContextMenuService ContextMenuService@inject TooltipService TooltipService@inject NotificationService NotificationService@inject ApplicationDbService ApplicationDbService<PageTitle>Stra&szlig;en</PageTitle><RadzenStack>    <RadzenRow AlignItems="AlignItems.Center">        <RadzenColumn Size="12" SizeMD="6">            <RadzenText Text="Stra&szlig;en" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />        </RadzenColumn>        <RadzenColumn Size="12" SizeMD="6">            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">                <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />                    <RadzenSplitButtonItem Text="CSV" Value="csv" />                </RadzenSplitButton>                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />            </RadzenStack>        </RadzenColumn>    </RadzenRow>    <RadzenRow>        <RadzenColumn SizeMD=12>            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30}) Data="@streets" TItem="Street" RowDoubleClick="@EditRow">                <Columns>                    <RadzenDataGridColumn TItem="Street" Property="ZipCode" Title="Postleitzahl">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="City" Title="Ort">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="District" Title="Ortsteil">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="Name" Title="Name">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="LowestHouseNumber" Title="Hausnummer Start">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="HighestHouseNumber" Title="Hausnummer Ende">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="DistributionTourName" Title="Zetteltour">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="DistributionTourOrderNumber" Title="Zetteltour Reihenfolge">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="CollectionTourName" Title="Sammlungstour">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="CollectionTourOrderNumber" Title="Sammlungstour Reihenfolge">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="CreatedAt" Title="Erstelldatum">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="CreatedBy" Title="Ersteller">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="UpdatedAt" Title="Änderungsdatum">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="UpdatedBy" Title="Bearbeiter">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">                        <Template Context="street">                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium" Shade="Shade.Lighter" Variant="Variant.Flat" Click=@(args => GridDeleteButtonClick(args, street)) @onclick:stopPropagation="true" />                        </Template>                    </RadzenDataGridColumn>                </Columns>            </RadzenDataGrid>        </RadzenColumn>    </RadzenRow></RadzenStack>@code {    [Inject]
    protected SecurityService Security { get; set; } = null!;

    protected IEnumerable<Street> streets = null!;
    protected RadzenDataGrid<Street> grid0 = null!;

    protected override async Task OnInitializedAsync()
    {
        streets = await ApplicationDbService.GetStreets(new Query { Expand = "CollectionTour,DistributionTour" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddStreet>("Neue Stra&szlig;e", null);

        streets = await ApplicationDbService.GetStreets(new Query { Expand = "CollectionTour,DistributionTour" });
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<Street> args)
    {
        await DialogService.OpenAsync<EditStreet>("Stra&szlig;e bearbeiten", new Dictionary<string, object> { { "Id", args.Data.Id } });

        streets = await ApplicationDbService.GetStreets(new Query { Expand = "CollectionTour,DistributionTour" });
        await grid0.Reload();
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, Street street)
    {
        try
        {
            if (await DialogService.Confirm("Sind Sie sicher, dass Sie diese Stra&szlig;e l&ouml;schen wollen?") == true)
            {
                var deleteResult = await ApplicationDbService.DeleteStreet(street.Id);
                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage                {                    Severity = NotificationSeverity.Error,                    Summary = $"Error",                    Detail = $"Stra&szlig;e kann nicht gel&ouml;scht werden"                });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ApplicationDbService.ExportStreetsToCSV(new Query                {                    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",                    OrderBy = $"{grid0.Query.OrderBy}",                    Expand = "CollectionTour,DistributionTour",                    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))                }, "Streets");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ApplicationDbService.ExportStreetsToExcel(new Query                {                    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",                    OrderBy = $"{grid0.Query.OrderBy}",                    Expand = "CollectionTour,DistributionTour",                    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))                }, "Streets");
        }
    }}