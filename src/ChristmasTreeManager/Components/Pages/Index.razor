@page "/"@attribute [Authorize]@inject IJSRuntime JSRuntime@inject NavigationManager NavigationManager@inject DialogService DialogService@inject ContextMenuService ContextMenuService@inject TooltipService TooltipService@inject NotificationService NotificationService@inject ApplicationDbService ApplicationDbService@attribute [Authorize]<RadzenText TextStyle="TextStyle.H2" TagName="TagName.H1" Class="rz-pt-8">    Willkommen beim Christbaum Manager!</RadzenText><RadzenStack Gap="1rem" Style="position: relative">    <RadzenCard Visible=@fetchingData Style="z-index: 3; text-align: center; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, .5)">        <RadzenCard Visible=@(error == null) Class="rz-my-12 rz-mx-auto rz-p-12" Style="width: 80%">            <RadzenText TextStyle="TextStyle.H6" Class="rz-my-12">Fetching data from GitHub...</RadzenText>            <RadzenCard Visible=@(error != null) Class="rz-my-12 rz-mx-auto rz-p-12" Style="width: 80%">                <RadzenText TextStyle="TextStyle.H6" Class="rz-my-8">An error has occurred: @error. Try reloading your browser.</RadzenText>            </RadzenCard>        </RadzenCard>    </RadzenCard>    <RadzenRow JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Class="rz-mb-4">        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-m-0">            Your Success Is Our Biggest Priority <a href="https://www.feuerwehr-traunstein.de" target="_blank">Freiwillige Feuerwehr Stadt Traunstein e.V.</a>        </RadzenText>    </RadzenRow>    <RadzenRow>        <RadzenColumn Size="12" SizeMD="8" SizeLG="4">            <RadzenCard Style="position: relative;">                <RadzenText TextStyle="TextStyle.H6">B&auml;ume</RadzenText>                <RadzenText TextStyle="TextStyle.H3" Class="rz-color-success" Style="position: absolute; right: 1.5rem; top: 1rem;">@registrations?.Sum(x => x.TreeCount) Stück</RadzenText>                <RadzenChart Style="width: 100%; height: 240px; margin-bottom: -30px;">                    <RadzenColumnSeries Data=@registrationsByDate ValueProperty="Count" CategoryProperty="Day" Title="B&auml;ume" Fill="var(--rz-success)" />                    <RadzenValueAxis Visible="false" />                    <RadzenCategoryAxis Visible="false" />                    <RadzenColumnOptions Margin="10" />                    <RadzenLegend Visible="false" />                </RadzenChart>            </RadzenCard>        </RadzenColumn>        <RadzenColumn Size="12" SizeMD="8" SizeLG="4">            <RadzenCard Style="position: relative;">                <RadzenText TextStyle="TextStyle.H6">Spenden</RadzenText>                <RadzenText TextStyle="TextStyle.H3" Class="rz-color-danger" Style="position: absolute; right: 1.5rem; top: 1rem;">@registrations?.Sum(x => x.Donation) €</RadzenText>                <RadzenChart Style="width: 100%; height: 240px; margin-bottom: -30px;">                    <RadzenColumnSeries Data=@donationByDate ValueProperty="Sum" CategoryProperty="Day" Title="Spenden" Fill="var(--rz-danger)" />                    <RadzenValueAxis Visible="false" />                    <RadzenCategoryAxis Visible="false" />                    <RadzenColumnOptions Margin="10" />                    <RadzenLegend Visible="false" />                </RadzenChart>            </RadzenCard>        </RadzenColumn>        <RadzenColumn Size="12" SizeMD="8" SizeLG="4">            <RadzenCard Style="position: relative; width: 100%; height: 270px;">                <RadzenText TextStyle="TextStyle.H2">Einnahmen: @income €</RadzenText>                <RadzenText TextStyle="TextStyle.H2">&Uuml;berschu&szlig;:  @profit €</RadzenText>            </RadzenCard>        </RadzenColumn>        @* <RadzenColumn Size="12" SizeMD="6" SizeLG="3">        <RadzenCard Style="position: relative;">        <RadzenText TextStyle="TextStyle.H6">Closed Issues</RadzenText>        <RadzenText TextStyle="TextStyle.H2" Class="rz-color-danger" Style="position: absolute; right: 1.5rem; top: 1rem;">@closedIssues?.Count()</RadzenText>        <RadzenChart Style="width: 100%; height: 120px; margin-bottom: -30px;">        <RadzenColumnSeries Data=@closedIssuesByDate ValueProperty="Count" CategoryProperty="Week" Title="Issues" Fill="var(--rz-danger)" />        <RadzenValueAxis Visible="false" />        <RadzenCategoryAxis Visible="false" />        <RadzenColumnOptions Margin="10" />        <RadzenLegend Visible="false" />        </RadzenChart>        </RadzenCard>        </RadzenColumn> *@        @* <RadzenColumn Size="12" SizeMD="6" SizeLG="3">        <RadzenCard Style="position: relative;">        <RadzenText TextStyle="TextStyle.H6">All Issues</RadzenText>        <RadzenText TextStyle="TextStyle.H2" Style="position: absolute; right: 1.5rem; top: 1rem;">@issues?.Count()</RadzenText>        <RadzenChart Style="width: 100%; height: 120px; margin-bottom: -30px;">        <RadzenLineSeries Data=@openIssuesByDate ValueProperty="Count" CategoryProperty="Week" Title="Open Issues" Smooth="true" Stroke="var(--rz-success)" />        <RadzenLineSeries Data=@closedIssuesByDate ValueProperty="Count" CategoryProperty="Week" Title="Closed Issues" Smooth="true" Stroke="var(--rz-danger)" />        <RadzenValueAxis Visible="false" />        <RadzenCategoryAxis Visible="false" />        <RadzenLegend Visible="false" />        </RadzenChart>        </RadzenCard>        </RadzenColumn> *@        @*  <RadzenColumn Size="12" SizeMD="6" SizeLG="3">        <RadzenCard>        <RadzenText TextStyle="TextStyle.H6">Progress</RadzenText>        <RadzenArcGauge Style="width: 100%; height: 120px; margin-top: -30px;">        <RadzenArcGaugeScale Max="1" Y="0.8" Radius="2">        <RadzenArcGaugeScaleValue Value=@closeRatio FormatString="{0:P0}" />        </RadzenArcGaugeScale>        </RadzenArcGauge>        </RadzenCard>        </RadzenColumn> *@    </RadzenRow>    @*  <RadzenRow>    <RadzenColumn Size="12" SizeMD="6" SizeLG="4">    <RadzenCard Style="height: 280px">    <RadzenText TextStyle="TextStyle.H6">Top Issue Labels</RadzenText>    <RadzenChart Style="width: 100%; height: 200px">    <RadzenDonutSeries Data=@labelGroups CategoryProperty="Label" ValueProperty="Count" Title="Issues" Fills=@labelColors />    </RadzenChart>    </RadzenCard>    </RadzenColumn>    <RadzenColumn Size="12" SizeMD="6" SizeLG="4">    <RadzenCard Style="height: 280px">    <RadzenText TextStyle="TextStyle.H6">Top Contributors</RadzenText>    <RadzenChart Style="width: 100%; height: 200px">    <RadzenPieSeries Data=@openByGroups CategoryProperty="Name" ValueProperty="Count" Title="Issues" />    </RadzenChart>    </RadzenCard>    </RadzenColumn>    <RadzenColumn Size="12" SizeMD="6" SizeLG="4">    <RadzenCard Style="height: 280px">    <RadzenText TextStyle="TextStyle.H6">Most Active Member</RadzenText>    <div Class="rz-text-align-center">    <img Style="width: 120px; border-radius: 50%; margin: 20px 0;" src=@mostActiveMember?.AvatarUrl alt="Most active member avatar" />    <h4>    @mostActiveMember?.Login    </h4>    </div>    </RadzenCard>    </RadzenColumn>    </RadzenRow> *@</RadzenStack>@code {
    class RegistrationGroup
    {
        public double Count { get; set; }
        public DateTime Day { get; set; }
    }

    class DonationGroup
    {
        public double Sum { get; set; }
        public DateTime Day { get; set; }
    }

    class RegistrationPointGroup
    {
        public int Count { get; set; }
        public string Label { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
    }

    IEnumerable<ChristmasTreeManager.Data.Application.RegistrationEntity> registrations = [];
    IEnumerable<RegistrationGroup> registrationsByDate = [];
    IEnumerable<DonationGroup> donationByDate = [];
    double income = 0;
    double profit = 0;    bool fetchingData = false;
    string error = null;

    void FilterIssues()
    {
        // filteredIssues = issues.OrderByDescending(issue => issue.CreatedAt);

        // if (selectedUser != null)
        // {
        //     filteredIssues = issues.Where(issue => issue.User.Login == selectedUser.Login);
        // }

        // if (selectedLabels != null)
        // {
        //     foreach (var selectedLabel in selectedLabels)
        //     {
        //         filteredIssues = filteredIssues.Where(issue => issue.Labels.Any(label => label.Name == selectedLabel));
        //     }
        // }

        // if (selectedState != IssueState.All)
        // {
        //     filteredIssues = filteredIssues.Where(issue => issue.State == selectedState);
        // }
    }

    void OnProgress()
    {
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            fetchingData = true;

            registrations = ApplicationDbService.GetRegistrationEntities();

            registrationsByDate = registrations
                .GroupBy(x => x.RegistrationDate.Date)
                .Select(group => new RegistrationGroup                    {                        Day = group.Key,                        Count = group.Sum(x => x.TreeCount)                    });
            donationByDate = registrations
                .GroupBy(x => x.RegistrationDate.Date)
                .Select(group => new DonationGroup                    {                        Day = group.Key,                        Sum = group.Sum(x => x.Donation)                    });
            income = registrations.Sum(x => x.TreeCount) * 3;
            profit = registrations.Sum(x => x.Donation) - income;

itHub.OnProgress += OnProgress;
            // try
            // {
            //     issues = await GitHub.GetIssues(DateTime.Now);
            //     filteredIssues = issues.OrderByDescending(issue => issue.CreatedAt);
            //     openIssues = issues.Where(issue => issue.State == IssueState.Open);
            //     closedIssues = issues.Where(issue => issue.State == IssueState.Closed);

            //     closeRatio = closedIssues.Count() / (double)issues.Count();

            //     openIssuesByDate = openIssues.GroupBy(issue => issue.CreatedAt.EndOfWeek())
            //             .Select(group => new IssueGroup
            //                 {
            //                     Week = group.Key,
            //                     Count = group.Count()
            //                 });

            //     closedIssuesByDate = closedIssues.GroupBy(issue => issue.ClosedAt.Value.EndOfWeek())
            //             .Select(group => new IssueGroup
            //                 {
            //                     Week = group.Key,
            //                     Count = group.Count()
            //                 });

            //     labels = issues.SelectMany(issue => issue.Labels).Select(label => label.Name).Distinct();

            //     labelGroups = issues.SelectMany(issue => issue.Labels)
            //                         .GroupBy(label => label, new LabelComparer())
            //                         .Select(group => new LabelGroup { Label = Regex.Replace(group.Key.Name, ":\\w+:", ""), Color = $"#{group.Key.Color}", Count = group.Count() })
            //                         .Where(group => group.Label != "area-blazor")
            //                         .OrderByDescending(group => group.Count)
            //                         .Take(5);

            //     labelColors = labelGroups.Select(label => label.Color);

            //     openByGroups = issues.GroupBy(issue => issue.User.Login)
            //                         .Select(group => new UserGroup { Name = group.Key, Count = group.Count() })
            //                         .OrderByDescending(group => group.Count)
            //                         .Take(7);

            //     mostActiveMember = issues.SelectMany(issue => issue.Assignees)
            //                         .GroupBy(assignee => assignee, new UserComparer())
            //                         .Select(group => new { User = group.Key, Count = group.Count() })
            //                         .OrderByDescending(group => group.Count)
            //                         .Select(group => group.User)
            //                         .FirstOrDefault();

            //     users = issues.Select(issue => issue.User)
            //                 .Distinct(new UserComparer());

            //     error = null;
            // }
            // catch (Exception ex)
            // {
            //     error = ex.Message;
            // }

            fetchingData = false;
            StateHasChanged();
        }
    }}