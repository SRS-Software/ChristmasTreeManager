@page "/add-registration-point"
@attribute [Authorize]

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ApplicationDbService ApplicationDbService

<PageTitle>Anmeldestelle</PageTitle>
    <RadzenColumn SizeMD=12>    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Anmeldestelle konnte nicht erstellt werden</RadzenAlert>    <RadzenTemplateForm TItem="RegistrationPoint" Data="@registrationPoint" Visible="@(registrationPoint != null && canEdit)" Submit="@FormSubmit">            
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@registrationPoint!.Name" Name="Name" />
                    <RadzenRequiredValidator Component="Name" Text="Name is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Addresse" Component="Address" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@registrationPoint!.Address" Name="Address" />
                    <RadzenRequiredValidator Component="Address" Text="Address is required" />
                </RadzenColumn>
            </RadzenRow>
          <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>@code {
    [Inject]
    protected SecurityService Security { get; set; } = null!;    protected bool hasChanges = false;
    protected bool canEdit = true;    protected bool errorVisible;
    protected RegistrationPoint registrationPoint = null!;

    protected override async Task OnInitializedAsync()
    {
        registrationPoint = new RegistrationPoint();
    }

    protected async Task FormSubmit()
    {
        try
        {
            await ApplicationDbService.CreateRegistrationPoint(Security.UserName, registrationPoint);
            DialogService.Close(registrationPoint);
        }
        catch (Exception ex)
        {
            hasChanges = ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException;
            canEdit = !(ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException);
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}
